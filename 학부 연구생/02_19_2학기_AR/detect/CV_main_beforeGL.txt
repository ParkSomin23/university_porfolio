#include <iostream>
#include <opencv.hpp>
#include <opencv2/opencv.hpp>
using namespace std;
using namespace cv;

#include "MarkerDetector.h"

#if !defined VK_ESCAPE
#define VK_ESCAPE 0x1B      // Escape character (27)
#endif

const int DESIRED_CAMERA_WIDTH = 640;
const int DESIRED_CAMERA_HEIGHT = 480;

static const char *windowName = "Marker_AR";   // Name shown in the GUI window.


// Get access to the webcam.
void initWebcam(VideoCapture &videoCapture, int cameraNumber)
{
	// Get access to the default camera.
	try {   // Surround the OpenCV call by a try/catch block so we can give a useful error message!
		videoCapture.open(cameraNumber);
	}
	catch (cv::Exception &e) {}
	if (!videoCapture.isOpened()) {
		cerr << "ERROR: Could not access the camera!" << endl;
		exit(1);
	}
	cout << "Loaded camera " << cameraNumber << "." << endl;
}

//int argc, char *argv[]
int main()
{
	//CameraCalibration camCali(526.58037684199849f, 524.65577209994706f, 318.41744018680112f, 202.96659047014398f);
	//CameraCalibration camCali(6.7103266224890285e+02, 6.7260421039971334e+02, 3.2983422933092743e+02, 2.3506910361754831e+02);
	CameraCalibration camCali(6.6023213196534357e+02, 6.5792746888702675e+02, 3.3156864715655962e+02, 2.4292404250751699e+02);


	// Allow the user to specify a camera number, since not all computers will be the same camera number.
	int cameraNumber = 0;   // Change this if you want to use a different camera device.

	/*if (argc > 1) {
		cameraNumber = atoi(argv[1]);
	}*/

	// Get access to the camera.
	VideoCapture camera(0);
	initWebcam(camera, cameraNumber);

	// Try to set the camera resolution. Note that this only works for some cameras on
	// some computers and only for some drivers, so don't rely on it to work!
	camera.set(CV_CAP_PROP_FRAME_WIDTH, DESIRED_CAMERA_WIDTH);
	camera.set(CV_CAP_PROP_FRAME_HEIGHT, DESIRED_CAMERA_HEIGHT);

	// Create a GUI window for display on the screen.
	namedWindow(windowName); // Resizable window, might not work on Windows.

	namedWindow("gray", WINDOW_AUTOSIZE);
	namedWindow("edgeImage", WINDOW_AUTOSIZE);
	namedWindow("colorEdgeImage", WINDOW_AUTOSIZE);
	//resizeWindow("edgeImage", 640, 480);

	// Run forever, until the user hits Escape to "break" out of this loop.
	while (true) {

		// Grab the next camera frame. Note that you can't modify camera frames.
		Mat cameraFrame;
		camera >> cameraFrame;
		if (cameraFrame.empty()) {
			cerr << "ERROR: Couldn't grab the next camera frame." << endl;
			exit(1);
		}

		//Mat displayedFrame = Mat(cameraFrame.size(), CV_8UC3);

		// Run AR
		MarkerDetector MD(camCali);
		MD.processFrame(cameraFrame);

		imshow(windowName, cameraFrame);
	
		// IMPORTANT: Wait for atleast 20 milliseconds, so that the image can be displayed on the screen!
		// Also checks if a key was pressed in the GUI window. Note that it should be a "char" to support Linux.
		char keypress = waitKey(20);  // This is needed if you want to see anything!
		if (keypress == VK_ESCAPE) {   // Escape Key
			// Quit the program!
			break;
		}

	}//end while

	return EXIT_SUCCESS;
}